{"version":3,"sources":["components/navigation.jsx","components/header.jsx","components/features.jsx","components/about.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Navigation","props","id","className","type","href","Header","data","title","Features","src","alt","About","paragraph","App","SmoothScroll","speed","speedAsDuration","useState","landingPageData","setLandingPageData","useEffect","JsonData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAEaA,EAAa,SAACC,GACzB,OAEE,qBAAKC,GAAG,OAAOC,UAAU,0CAAzB,SACE,sBAAKA,UAAU,qBAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,yBACEC,KAAK,SACLD,UAAU,0BACV,cAAY,WACZ,cAAY,gCAJd,UAMG,IACD,sBAAMA,UAAU,UAAhB,+BAAmD,IACnD,sBAAMA,UAAU,aAAmB,IACnC,sBAAMA,UAAU,aAAmB,IACnC,sBAAMA,UAAU,aAAmB,OAErC,mBAAGA,UAAU,2BAA2BE,KAAK,YAA7C,4BAEK,OAGP,qBACEF,UAAU,2BACVD,GAAG,+BAFL,SAIE,qBAAIC,UAAU,8BAAd,UACE,6BACE,mBAAGE,KAAK,YAAYF,UAAU,cAA9B,wBAIF,6BACE,mBAAGE,KAAK,SAASF,UAAU,cAA3B,gCCpCDG,EAAS,SAACL,GACrB,OACE,wBAAQC,GAAG,SAAX,SACE,qBAAKC,UAAU,QAAf,SACE,qBAAKA,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,uBACA,sBAAKA,UAAU,sCAAf,UACC,uBAAM,uBAEL,+BACGF,EAAMM,KAAON,EAAMM,KAAKC,MAAQ,UACjC,4BAGF,mBACEH,KAAK,YACLF,UAAU,oCAFZ,wBAKK,mBCnBRM,EAAW,SAACR,GACvB,OACE,qBAAKC,GAAG,WAAWC,UAAU,iCAA7B,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,qDAAf,UACE,oBAAID,GAAK,aAAT,sBACA,uBACA,oBAAIA,GAAK,aAAT,iJAA8J,uBAC9J,oBAAIA,GAAK,aAAT,6LAGA,oBAAIA,GAAK,aAAT,2BACA,oBAAIA,GAAK,aAAT,iCACA,oBAAIA,GAAK,aAAT,gCAGA,mBAAGA,GAAK,aAAR,yCACA,uBAEA,oBAAIA,GAAK,aAAT,yLAAsM,uBACtM,oBAAIA,GAAK,aAAT,qHAGF,qBAAKC,UAAU,MAAf,SACA,qBAAKO,IAAM,gBAAgBC,IAAM,aCxB5BC,EAAQ,SAACX,GACpB,OACE,qBAAKC,GAAG,QAAR,SACE,qBAAKC,UAAU,YAAf,SACE,qBAAKA,UAAU,MAAf,SAEE,qBAAKA,UAAU,qBAAf,SACE,sBAAKA,UAAU,6BAAf,UACE,uDACA,4BAAIF,EAAMM,KAAON,EAAMM,KAAKM,UAAY,eACxC,qBAAKV,UAAU,qBAAf,SACE,sBAAKA,UAAU,aAAf,UACE,sBAAKA,UAAU,gCAAf,UAEA,gCACA,gEACA,2RAGA,gCACA,kDACA,0RAGF,qBAAKA,UAAU,gCAAf,SACE,gCACA,wCACA,4K,uBCIHW,G,MAvBO,IAAIC,IAAa,eAAgB,CACrDC,MAAO,IACPC,iBAAiB,IAGP,WACV,MAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAKA,OAJAC,qBAAU,WACRD,EAAmBE,KAClB,IAGD,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAQf,KAAMY,EAAgBb,SAE9B,cAAC,EAAD,CAAOC,KAAMY,EAAgBP,QAC7B,cAAC,EAAD,CAAUL,KAAMY,EAAgBV,gBCflBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6632aba3.chunk.js","sourcesContent":["\n\nexport const Navigation = (props) => {\n  return (\n   \n    <nav id='menu' className='navbar navbar-default navbar-fixed-top '>\n      <div className='container bg-black' >\n        <div className='navbar-header bg-black'>\n          <button\n            type='button'\n            className='navbar-toggle collapsed'\n            data-toggle='collapse'\n            data-target='#bs-example-navbar-collapse-1'\n          >\n            {' '}\n            <span className='sr-only'>Toggle navigation</span>{' '}\n            <span className='icon-bar'></span>{' '}\n            <span className='icon-bar'></span>{' '}\n            <span className='icon-bar'></span>{' '}\n          </button>\n          <a className='navbar-brand page-scroll' href='#page-top'>\n            Project Eluune\n          </a>{' '}\n        </div>\n\n        <div\n          className='collapse navbar-collapse'\n          id='bs-example-navbar-collapse-1'\n        >\n          <ul className='nav navbar-nav navbar-right'>\n            <li>\n              <a href='#features' className='page-scroll'>\n                Features\n              </a>\n            </li>\n            <li>\n              <a href='#about' className='page-scroll'>\n                About\n              </a>\n            </li>\n       \n          \n           \n          </ul>\n        </div>\n      </div>\n    </nav>\n    \n  )\n}\n","export const Header = (props) => {\n  return (\n    <header id='header'>\n      <div className='intro'>\n        <div className='overlay'>\n          <div className='container'>\n            <div className='row'>\n              <br />\n              <div className='col-md-8 col-md-offset-2 intro-text'>\n               <br /><br />\n                \n                <h1>\n                  {props.data ? props.data.title : 'Loading'}\n                  <span></span>\n                </h1>\n               \n                <a\n                  href='#features'\n                  className='btn btn-custom btn-lg page-scroll'\n                >\n                  Mint (TBA)\n                </a>{' '}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n    </header>\n  )\n}\n","\n\nexport const Features = (props) => {\n  return (\n    <div id='features' className='text-center bg-dark text-white'>\n      <div className='container'>\n        <div className='col-md-10 text-white col-md-offset-1 section-title'>\n          <h2 id = \"pleasework\">Features</h2>\n          <br />\n          <h4 id = \"pleasework\">Founding StarGardens are not only the key to your own land, they are a direct communication channel between you and the story-world</h4><br />\n          <h4 id = \"pleasework\">Each founding StarGarden has unique traits lying within their metadata represented by an emblem that appears on the StarGarden and demarcates which Faction founders belong to.</h4>\n          \n          \n          <h2 id = \"pleasework\">20 FACTIONS. </h2>\n          <h2 id = \"pleasework\">39 DORMANT TRAITS. </h2>\n          <h2 id = \"pleasework\">5 LEVELS OF RARITY</h2>\n\n          \n          <p id = \"pleasework\">No two emblems are the same</p>\n          <br />\n          \n          <h3 id = \"pleasework\">StarGarden Founders will receive pieces of the game and story will be airdropped to them, depending on the make-up of these traits- so the faction you are in is important </h3><br />\n          <h4 id = \"pleasework\">Dormant traits are another kind of easter egg that will reveal themselves to you as we move forward </h4>\n        </div>\n        \n        <div className='row'>\n        <img src = \"img/crazy.png\" alt = \"\"></img>\n        \n        </div>\n      </div>\n    </div>\n  )\n}\n","\n\nexport const About = (props) => {\n  return (\n    <div id=\"about\">\n      <div className=\"container\">\n        <div className=\"row\">\n          \n          <div className=\"col-xs-12 col-md-6\">\n            <div className=\"about-text text-secondary \">\n              <h2>What is a StarGarden?</h2>\n              <p>{props.data ? props.data.paragraph : \"loading...\"}</p>\n              <div className=\"col-xs-6 col-md-12\">  \n                <div className=\"list-style\">\n                  <div className=\"col-lg-16 col-sm-16 col-xs-18\">\n                  \n                  <div>\n                  <h4>Minting a founders StarGarden </h4>\n                  <p>By minting a founders StarGarden, you essentially become the owner of a playspace and the leader of the Tribe that populates it. Your Stargarden levels up along with its members, permanantly improving 'Play to Earn' opportunities for anyone on it.</p>\n                  </div>\n                \n                  <div>\n                  <h4>StarGarden NFT's</h4>\n                  <p>StarGarden's are living entities that evolve. Progression content accumulates on your StarGarden and becomes permanent. Thus, the StarGarden becomes more powerful the more it is used, unlocking new gameplay, and enhancing its value if traded. </p>\n                  </div>\n                  </div>\n                <div className=\"col-lg-16 col-sm-16 col-xs-18\">\n                  <div>\n                  <h4>Tribes</h4>\n                  <p>Other players have to be on a StarGarden to unlock gameplay; and, as a owner of one, you get to choose who can join. </p>\n                  </div>\n                  \n                </div>\n               </div> \n             \n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { Navigation } from \"./components/navigation\";\nimport { Header } from \"./components/header\";\nimport { Features } from \"./components/features\";\nimport { About } from \"./components/about\";\n\nimport JsonData from \"./data/data.json\";\nimport SmoothScroll from \"smooth-scroll\";\nimport \"./App.css\";\n\nexport const scroll = new SmoothScroll('a[href*=\"#\"]', {\n  speed: 1000,\n  speedAsDuration: true,\n});\n\nconst App = () => {\n  const [landingPageData, setLandingPageData] = useState({});\n  useEffect(() => {\n    setLandingPageData(JsonData);\n  }, []);\n\n  return (\n    <div>\n      <Navigation />\n      <Header data={landingPageData.Header} />\n    \n      <About data={landingPageData.About} />\n      <Features data={landingPageData.Features} />\n\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}